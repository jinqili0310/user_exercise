// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  exercises     Exercise[]
  favorites     Favorite[]
  saves         Save[]
  ratings       Rating[]
}

model Exercise {
  id            String    @id @default(cuid())
  name          String
  description   String
  difficulty    Int       @db.SmallInt
  isPublic      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  creatorId     String
  creator       User      @relation(fields: [creatorId], references: [id])
  favorites     Favorite[]
  saves         Save[]
  ratings       Rating[]

  @@index([isPublic, createdAt])
  @@index([creatorId, createdAt])
  @@index([name, description])
}

model Favorite {
  id          String    @id @default(cuid())
  userId      String
  exerciseId  String
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  exercise    Exercise  @relation(fields: [exerciseId], references: [id])

  @@unique([userId, exerciseId])
}

model Save {
  id          String    @id @default(cuid())
  userId      String
  exerciseId  String
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  exercise    Exercise  @relation(fields: [exerciseId], references: [id])

  @@unique([userId, exerciseId])
}

model Rating {
  id          String    @id @default(cuid())
  userId      String
  exerciseId  String
  rating      Int       @db.SmallInt
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  exercise    Exercise  @relation(fields: [exerciseId], references: [id])

  @@unique([userId, exerciseId])
}
